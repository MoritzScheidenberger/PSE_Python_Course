{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: |\n",
        "  ![](main_quarto_files/pse_logo.png){style=\"float: right; width: 100px;\"}\n",
        "  Writing a Story\n",
        "subtitle: \"Understanding the Impact of Uncertainty on Replacement Hiring\"\n",
        "author: \"Moritz Scheidenberger\"\n",
        "date-modified: \"today\"\n",
        "abstract: \"In the labor market, transitions in and out of unemployment are driven by two wheels.\n",
        "One wheel is the classical cycle of job creation and job destruction. Firms create jobs for which they hire unemployed workers. Simulatenously, some already filled jobs are destroyed and the associated workers become unemployed.\n",
        "The second wheel is driven by churn. Some already employed workers are hired by another firm and leave behind an empty position which, subsequently, may be filled by another already employed worker who themselves leaves behind a position. So the churn wheel keeps turning until the empty position is filled by a previously unemployed worker.\n",
        "The conventional view is that models of the labor market model can abstract from the churn wheel when mainly interested in unemployment dynamics. Since job creation must equal job destruction, the number of UE transitions is determined by the EU transitions. EE transitions offset eachother and do not matter for unemploymend dynamics. Yet, disregarding replacement hiring dynamics risks missing essential labor market effects when economic shocks alter firms' quit replacement decisions through mechanisms beyond the usual business cycle impact.\n",
        "I provide novel evidence that uncertainty shocks directly impact firms' replacement hiring decisions. The reluctance to rehire under uncertainty arises because firms treat existing positions as valuable but sunk investments, leading to a wait-and-see approach.\"\n",
        "\n",
        "format:\n",
        "  html:\n",
        "    theme:\n",
        "      light: flatly  # Set light mode as default\n",
        "      dark: darkly   # Fallback for dark mode\n",
        "    css: main_quarto_files/costum_style.css\n",
        "    fig-format: svg\n",
        "    fig-dpi: 600\n",
        "    code-fold: true\n",
        "    toc: true\n",
        "    toc-location: right\n",
        "    toc-title: \"Contents\"\n",
        "    toc-depth: 3\n",
        "    smooth-scroll: true\n",
        "\n",
        "title-block-style: \"default\"\n",
        "title-block-banner: \"#921539\"\n",
        "title-block-banner-color: \"white\"\n",
        "mainfont: \"Segoe UI\"\n",
        "\n",
        "number-sections: true\n",
        "\n",
        "jupyter: quarto_env  # Use the Conda environment\n",
        "\n",
        "# Turns out that one has to use knitr & R to run all the python code\n",
        "# once the quarto document also contains R code\n",
        "\n",
        "# This is what it takes to make things run\n",
        "execute:\n",
        "  eval: true\n",
        "  freeze: auto\n",
        "  fig-show: false\n",
        "\n",
        "  # warning: false  # This suppresses all warnings globally\n",
        "# engine: knitr\n",
        "\n",
        "\n",
        "\n",
        "---"
      ],
      "id": "3c5fb631"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: legacy_code\n",
        "#| echo: false\n",
        "#| include: false\n",
        "\n",
        "# This would have to be an R block to work\n",
        "# But then, everything runs in R, even python code\n",
        "\n",
        "# knitr::opts_chunk$set(echo = TRUE)\n",
        "\n",
        "# library(reticulate)\n",
        "\n",
        "# Force Reticulate to use \"quarto_env\"\n",
        "# use_condaenv(\"quarto_env\", required = TRUE)\n",
        "\n",
        "# To check the current Python version:\n",
        "# reticulate::py_config()"
      ],
      "id": "legacy_code",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Data and Methodology\n",
        "\n",
        "## File Naming Convention for LEHD Data\n",
        "\n",
        "The LEHD provides various data sets for the US based on Census data. ...\n",
        "\n",
        "<details>\n",
        "<summary> **LEHD Data Naming Convention** (Click to Expand)</summary>\n",
        "\n",
        "| **Component** | **Code** | **Description** |\n",
        "|--------------|---------|----------------|\n",
        "| **GEOHI (Geography Identifier)** | `all` | All available states |\n",
        "| | `us` | National data (50 states + DC) |\n",
        "| | `metro` | CBSA-level collection (metropolitan areas) |\n",
        "| | `[st]` | Two-letter state postal code (e.g., `ca` for California) |\n",
        "| | `[NNNNN]` | CBSA-derived code for metro areas |\n",
        "| **DEMO (Demographic Breakdown)** | `d` | No demographic detail |\n",
        "| | `rh` | Race by Ethnicity |\n",
        "| | `sa` | Sex by Age |\n",
        "| | `se` | Sex by Education |\n",
        "| | `sarhe` | Combined `sa`, `rh`, and `se` |\n",
        "| **FAS (Firm Age & Size Breakdown)** | `f` | No firm size or age breakdown |\n",
        "| | `fa` | Firm age tabulations |\n",
        "| | `fs` | Firm size tabulations |\n",
        "| **GEOCAT (Geographic Category)** | `gb` | Metropolitan (complete) |\n",
        "| | `gc` | Counties |\n",
        "| | `gm` | Metropolitan/Micropolitan (state parts) |\n",
        "| | `gn` | National (50 States + DC) |\n",
        "| | `gs` | States |\n",
        "| | `gw` | Workforce Investment Areas |\n",
        "| **INDCAT (Industry Classification)** | `n` | All industries |\n",
        "| | `ns` | NAICS sectors |\n",
        "| | `n3` | NAICS subsectors |\n",
        "| | `n4` | NAICS industry groups |\n",
        "| **OWNCAT (Ownership Classification)** | `of` | Federal Government |\n",
        "| | `op` | All Private |\n",
        "| | `oslp` | State, Local, and Private ownership |\n",
        "| **SA (Seasonal Adjustment)** | `s` | Seasonally adjusted |\n",
        "| | `u` | Not seasonally adjusted |\n",
        "| **EXT (File Format)** | `csv` | Comma-Separated file |\n",
        "| | `pdf` | Printable PDF |\n",
        "| | `xls` | Excel (limited availability) |\n",
        "| | `xlsx` | Excel (not available for large files) |\n",
        "*Source: [LEHD CSV Naming Convention](https://lehd.ces.census.gov/data/schema/V4.12.0/lehd_csv_naming.html)*\n",
        "\n",
        "**Quick Example Breakdown**\n",
        "- **qwi** → Quarterly Workforce Indicators (QWI) Counts\n",
        "- **us** → National-level data\n",
        "- **sa** → Sex by Age\n",
        "- **f** → No firm size or age breakdown\n",
        "- **gn** → National (50 states + DC)\n",
        "- **ns** → NAICS sectors\n",
        "- **op** → All Private ownership\n",
        "- **u** → Not seasonally adjusted\n",
        "\n",
        "</details>\n",
        "\n",
        "<span style=\"color: red;\">**Note: National QWI data is only available for Private ownership!**</span>\n",
        "\n",
        "---\n"
      ],
      "id": "27cd9254"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: obtain_data\n",
        "#| echo: false\n",
        "\n",
        "## Downloading and extracting the data\n",
        "\n",
        "import os\n",
        "import requests\n",
        "import gzip\n",
        "import shutil\n",
        "import pandas as pd\n",
        "from bs4 import BeautifulSoup\n",
        "import sys\n",
        "\n",
        "# Base URL\n",
        "BASE_URL = \"https://lehd.ces.census.gov/data/qwi/latest_release/us/\"\n",
        "\n",
        "# Directory setup\n",
        "BASE_PATH = r\"C:\\Users\\moritz\\Nextcloud\\PhD\\Projects\\uncertainty_labor\\data\"\n",
        "DOWNLOAD_DIR = os.path.join(BASE_PATH, \"qwi_data\")\n",
        "EXTRACT_DIR = os.path.join(BASE_PATH, \"qwi_extracted\")\n",
        "os.makedirs(DOWNLOAD_DIR, exist_ok=True)\n",
        "os.makedirs(EXTRACT_DIR, exist_ok=True)\n",
        "\n",
        "# User-defined filter (Set to None for all files, or specify exact match criteria)\n",
        "FILTER_CRITERIA = \"qwi_us_sa_f_gn_ns_op_u.csv.gz\"  # Specify the exact filename needed\n",
        "\n",
        "# Fetch webpage content\n",
        "response = requests.get(BASE_URL)\n",
        "if response.status_code != 200:\n",
        "    sys.exit()  # Exit silently on failure\n",
        "\n",
        "# Parse HTML\n",
        "soup = BeautifulSoup(response.text, \"html.parser\")\n",
        "\n",
        "# Extract .csv.gz file links\n",
        "file_links = [BASE_URL + a['href'] for a in soup.find_all('a', href=True) if a['href'].endswith('.csv.gz')]\n",
        "\n",
        "# Apply exact filename filtering\n",
        "if FILTER_CRITERIA:\n",
        "    file_links = [link for link in file_links if FILTER_CRITERIA in link]\n",
        "\n",
        "if not file_links:\n",
        "    sys.exit()  # Exit silently if no files are found\n",
        "\n",
        "# Suppress all printing by redirecting stdout\n",
        "original_stdout = sys.stdout\n",
        "sys.stdout = open(os.devnull, 'w')\n",
        "\n",
        "try:\n",
        "    for file_url in file_links:\n",
        "        file_name = os.path.join(DOWNLOAD_DIR, os.path.basename(file_url))\n",
        "\n",
        "        # Download file (silent)\n",
        "        with requests.get(file_url, stream=True) as r:\n",
        "            with open(file_name, \"wb\") as f:\n",
        "                for chunk in r.iter_content(chunk_size=8192):\n",
        "                    f.write(chunk)\n",
        "\n",
        "        # Extract file (silent)\n",
        "        extracted_file_name = os.path.join(EXTRACT_DIR, os.path.basename(file_name).replace(\".gz\", \"\"))\n",
        "        with gzip.open(file_name, 'rb') as f_in, open(extracted_file_name, 'wb') as f_out:\n",
        "            shutil.copyfileobj(f_in, f_out)\n",
        "\n",
        "        # Read CSV (silent)\n",
        "        df = pd.read_csv(extracted_file_name)\n",
        "\n",
        "finally:\n",
        "    # Restore original stdout\n",
        "    sys.stdout = original_stdout\n",
        "\n",
        "print(\"Data downloaded & extracted successfully.\")\n",
        "\n",
        "# Load dataset into a DataFrame for further analysis\n",
        "def load_qwi_data():\n",
        "    data_path = os.path.join(EXTRACT_DIR, FILTER_CRITERIA.replace(\".gz\", \"\"))\n",
        "    if os.path.exists(data_path):\n",
        "        return pd.read_csv(data_path)  # No print statements\n",
        "    else:\n",
        "        return None  # Silent failure\n"
      ],
      "id": "obtain_data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "raw",
      "metadata": {},
      "source": [
        "---"
      ],
      "id": "3431035a"
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now let's take a quick look at the data to know what we are working with and how to proceed."
      ],
      "id": "7f3ab173"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: select_data\n",
        "#| echo: false\n",
        "\n",
        "## Work with the data\n",
        "\n",
        "# Take a look at all the different variables\n",
        "df_qwi = load_qwi_data()\n",
        "if df_qwi is not None:\n",
        "    print(\"Column Names (formatted):\")\n",
        "    import textwrap\n",
        "column_list = \" | \".join(df_qwi.columns)\n",
        "print(textwrap.fill(column_list, width=100))\n",
        "\n",
        "\n",
        "# Print unique values for specific columns\n",
        "columns_to_check = [\"seasonadj\", \"geo_level\", \"ind_level\", \"industry\", \"ownercode\", \"sex\", \"agegrp\",\n",
        "                    \"race\", \"ethnicity\", \"education\", \"firmage\", \"firmsize\"]  # Adjust column names as needed\n",
        "\n",
        "for col in columns_to_check:\n",
        "    if col in df_qwi.columns:\n",
        "        unique_values = \", \".join(map(str, sorted(df_qwi[col].dropna().unique())))\n",
        "        print(f\"{col}: {unique_values}\")\n",
        "    else:\n",
        "        print(f\"Warning: Column '{col}' not found in DataFrame.\")"
      ],
      "id": "select_data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now that we can see the data and know which variables have various cateogries, we can proceed by extracting the time series that we are most interested in.\n",
        "\n",
        "The variables typically contained in the QWI data follow in a table below:\n",
        "\n",
        "\n",
        "<details>\n",
        "<summary> **Variables Table** (Click to Expand)</summary>\n",
        "\n",
        "| Indicator Variable | Alternate Name | Status Flag | Indicator Name | Description | Units | Concept | Base |\n",
        "|-------------------|---------------|-------------|---------------|-------------|-------|---------|------|\n",
        "| Emp | B | sEmp | Beginning-of-Quarter Employment | Estimate of the total number of jobs on the first day of the reference quarter | Count | Employment | 1 |\n",
        "| EmpEnd | E | sEmpEnd | End-of-Quarter Employment | Estimate of the number of jobs on the last day of the quarter | Count | Employment | 1 |\n",
        "| EmpS | F | sEmpS | Full-Quarter Employment (Stable) | Estimate of stable jobs - the number of jobs that are held on both the first and last day of the quarter with the same employer | Count | Employment | 1 |\n",
        "| EmpTotal | M | sEmpTotal | Employment - Reference Quarter | Estimated count of people employed in a firm at any time during the quarter | Count | Employment | 1 |\n",
        "| EmpSpv | Fpv | sEmpSpv | Full-Quarter Employment in the Previous Quarter | Estimate of stable jobs in the quarter before the reference quarter | Count | Employment | 1 |\n",
        "| HirA | A | sHirA | Hires (All Accessions) | Estimated number of workers who started a new job in the specified quarter | Count | Hire | 1 |\n",
        "| HirN | H | sHirN | New Hires | Estimated number of workers who started a new job excluding recall hires | Count | Hire | 1 |\n",
        "| HirR | R | sHirR | Recall Hires | Estimated number of workers who returned to the same employer where they had worked within the previous year | Count | Hire | 1 |\n",
        "| Sep | S | sSep | Separations (All) | Estimated number of workers whose job with a given employer ended in the specified quarter | Count | Separation | 1 |\n",
        "| HirAEnd | CA | sHirAEnd | End-of-Quarter Hires | Estimated number of workers who started a new job in the specified quarter, which continued into next quarter | Count | Hire | 1 |\n",
        "| SepBeg | CS | sSepBeg | Beginning-of-Quarter Separations | Estimated number of workers whose job in the previous quarter continued and ended in the given quarter | Count | Separation | 1 |\n",
        "| HirAEndRepl | EI | sHirAEndRepl | Replacement Hires | Hires into continuous quarter employment in excess of job creation | Count | Hire | 1 |\n",
        "| HirAEndR | CAR | sHirAEndR | End-of-Quarter Hiring Rate | Hires as a percent of average employment | Rate | Hire | (Emp + EmpEnd)/2 |\n",
        "| SepBegR | CSR | sSepBegR | Beginning-of-Quarter Separation Rate | Separations as a percent of average employment | Rate | Separation | (Emp + EmpEnd)/2 |\n",
        "| HirAEndReplR | EIR | sHirAEndReplR | Replacement Hiring Rate | Replacement hires as a percent of the average of beginning- and end-of-quarter employment | Rate | Hire | (Emp + EmpEnd)/2 |\n",
        "| HirAS | FA | sHirAS | Hires (All Hires into Full-Quarter Employment) | Estimated number of workers that started a job that lasted at least one full quarter with a given employer | Count | Hire | 1 |\n",
        "| HirNS | FH | sHirNS | New Hires (New Hires into Full-Quarter Employment) | Estimated number of workers who started a job that they had not held within the past year and the job turned into a job that lasted at least a full quarter with a given employer | Count | Hire | 1 |\n",
        "| SepS | FS | sSepS | Separations (Flows out of Full-Quarter Employment) | Estimated number of workers who had a job for at least a full quarter and then the job ended | Count | Separation | 1 |\n",
        "| SepSnx | FSnx | sSepSnx | Separations in the Next Quarter (Flows out of Full-Quarter Employment) | Estimated number of workers in the next quarter who had a job for at least a full quarter and then the job ended | Count | Separation | 1 |\n",
        "| TurnOvrS | FT | sTurnOvrS | Turnover (Stable) | The rate at which stable jobs begin and end | Rate | Turnover | 2*EmpS |\n",
        "| FrmJbGn | JC | sFrmJbGn | Firm Job Gains (Job Creation) | Estimated number of jobs gained at firms throughout the quarter | Count | Job Flows | 1 |\n",
        "| FrmJbLs | JD | sFrmJbLs | Firm Job Loss (Job Destruction) | Estimated number of jobs lost at firms throughout the quarter | Count | Job Flows | 1 |\n",
        "| FrmJbC | JF | sFrmJbC | Firm Job Change (Net Change) | Difference between firm job gain and firm job loss | Count | Job Flows | 1 |\n",
        "| FrmJbGnS | FJC | sFrmJbGnS | Firm Job Gains (Stable) | Estimated number of full-quarter jobs gained at firms | Count | Job Flows | 1 |\n",
        "| FrmJbLsS | FJD | sFrmJbLsS | Firm Job Loss (Stable) | Estimated number of full-quarter jobs lost at firms | Count | Job Flows | 1 |\n",
        "| FrmJbCS | FJF | sFrmJbCS | Firm Job Change (Stable; Net Change) | Net growth in jobs that last a full quarter | Count | Job Flows | 1 |\n",
        "| EarnS | ZW3 | sEarnS | Average Monthly Earnings (Full-Quarter Employment) | Average monthly earnings of employees with stable jobs | Dollars | Earnings | EmpS |\n",
        "| EarnBeg | ZW2B | sEarnBeg | Average Monthly Earnings (Beginning-of-Quarter Employment) | Average monthly earnings of employees who worked on the first day of the reference quarter | Dollars | Earnings | Emp |\n",
        "| EarnHirAS | ZWFA | sEarnHirAS | Average Monthly Earnings (All Hires into Full-Quarter Employment) | Average monthly earnings for workers who started a job that turned into a job lasting a full quarter | Dollars | Earnings | HirAS |\n",
        "| EarnHirNS | ZWFH | sEarnHirNS | Average Monthly Earnings (New Hires into Full-Quarter Employment) | Average monthly earnings of newly stable employees | Dollars | Earnings | HirNS |\n",
        "| EarnSepS | ZWFS | sEarnSepS | Average Monthly Earnings (Flows out of Full-Quarter Employment) | Average monthly earnings of separations from full-quarter status at an establishment | Dollars | Earnings | SepSnx |\n",
        "| Payroll | W1 | sPayroll | Total Quarterly Payroll | Total quarterly payroll for all jobs | Dollars | Earnings | 1 |\n",
        "\n",
        "*Source: [LEHD Public Use Schema](https://lehd.ces.census.gov/data/schema/V4.12.0/lehd_public_use_schema.html)*\n",
        "\n",
        "</details>\n",
        "\n",
        "The categorical variables show us additional levels of detail that we can ge, beyond the basic aggregates.\n",
        "\n",
        "\n",
        "<details>\n",
        "<summary> **Categorical Variables Table** (Click to Expand)</summary>\n",
        "\n",
        "**5.1. Agegrp**\n",
        "\n",
        "| **agegrp** | **Label** |\n",
        "|-----------|--------------------------------|\n",
        "| A00       | All Ages (14-99)               |\n",
        "| A01       | 14-18                          |\n",
        "| A02       | 19-21                          |\n",
        "| A03       | 22-24                          |\n",
        "| A04       | 25-34                          |\n",
        "| A05       | 35-44                          |\n",
        "| A06       | 45-54                          |\n",
        "| A07       | 55-64                          |\n",
        "| A08       | 65-99                          |\n",
        "\n",
        "**5.2. Education**\n",
        "\n",
        "| **education** | **Label** |\n",
        "|--------------|--------------------------------------------------------|\n",
        "| E0          | All Education Categories                              |\n",
        "| E1          | Less than high school                                 |\n",
        "| E2          | High school or equivalent, no college                 |\n",
        "| E3          | Some college or Associate degree                      |\n",
        "| E4          | Bachelor’s degree or advanced degree                  |\n",
        "| E5          | Educational attainment not available (workers < 24)    |\n",
        "\n",
        "**5.3. Ethnicity**\n",
        "\n",
        "| **ethnicity** | **Label** |\n",
        "|-------------|---------------------------|\n",
        "| A0          | All Ethnicities            |\n",
        "| A1          | Not Hispanic or Latino     |\n",
        "| A2          | Hispanic or Latino         |\n",
        "\n",
        "**5.4. Firmage**\n",
        "\n",
        "| **firmage** | **Label** |\n",
        "|-----------|------------------------------|\n",
        "| 0         | All Firm Ages                |\n",
        "| 1         | 0-1 Years                    |\n",
        "| 2         | 2-3 Years                    |\n",
        "| 3         | 4-5 Years                    |\n",
        "| 4         | 6-10 Years                   |\n",
        "| 5         | 11+ Years                    |\n",
        "| N         | Firm Age Not Available       |\n",
        "\n",
        "**5.5. Firmsize**\n",
        "\n",
        "| **firmsize** | **Label** |\n",
        "|------------|------------------------------|\n",
        "| 0         | All Firm Sizes                |\n",
        "| 1         | 0-19 Employees                |\n",
        "| 2         | 20-49 Employees               |\n",
        "| 3         | 50-249 Employees              |\n",
        "| 4         | 250-499 Employees             |\n",
        "| 5         | 500+ Employees                |\n",
        "| N         | Firm Size Not Available       |\n",
        "\n",
        "**5.6. Ownercode**\n",
        "\n",
        "| **ownercode** | **Label** |\n",
        "|-------------|------------------------------------------|\n",
        "| A00        | State and local government + private    |\n",
        "| A01        | Federal government                      |\n",
        "| A05        | All Private                             |\n",
        "\n",
        "**5.7. Periodicity**\n",
        "\n",
        "| **periodicity** | **Label** |\n",
        "|--------------|-----------------|\n",
        "| A          | Annual data      |\n",
        "| Q          | Quarterly data   |\n",
        "\n",
        "**5.8. Quarter**\n",
        "\n",
        "| **quarter** | **Label** |\n",
        "|---------|------------------------------------|\n",
        "| 1       | 1st Quarter (Jan-Mar)            |\n",
        "| 2       | 2nd Quarter (Apr-Jun)            |\n",
        "| 3       | 3rd Quarter (Jul-Sep)            |\n",
        "| 4       | 4th Quarter (Oct-Dec)            |\n",
        "\n",
        "**5.9. Race**\n",
        "\n",
        "| **race** | **Label** |\n",
        "|--------|---------------------------------------------|\n",
        "| A0     | All Races                                  |\n",
        "| A1     | White Alone                                |\n",
        "| A2     | Black or African American Alone           |\n",
        "| A3     | American Indian or Alaska Native Alone    |\n",
        "| A4     | Asian Alone                               |\n",
        "| A5     | Native Hawaiian or Other Pacific Islander |\n",
        "| A6     | Some Other Race Alone (Not Used)         |\n",
        "| A7     | Two or More Race Groups                   |\n",
        "\n",
        "**5.10. Seasonadj**\n",
        "\n",
        "| **seasonadj** | **Label** |\n",
        "|-----------|-----------------------|\n",
        "| S         | Seasonally adjusted   |\n",
        "| U         | Not seasonally adjusted |\n",
        "\n",
        "**5.11. Sex**\n",
        "\n",
        "| **sex** | **Label** |\n",
        "|------|--------------|\n",
        "| 0    | All Sexes   |\n",
        "| 1    | Male       |\n",
        "| 2    | Female     |\n",
        "\n",
        "\n",
        "**5.12.1. Industry Levels**\n",
        "\n",
        "| **ind_level** | **Label** |\n",
        "|-------------|----------------------|\n",
        "| A         | All Industries       |\n",
        "| S         | NAICS Sectors        |\n",
        "| 3         | NAICS Subsectors     |\n",
        "| 4         | NAICS Industry Groups |\n",
        "\n",
        "**5.12.2. Industry**\n",
        "\n",
        "| **industry** | **Label** | **ind_level** |\n",
        "|------------|-------------------------------------------------|-------------|\n",
        "| 00         | All NAICS Sectors                               | A           |\n",
        "| 000        | All NAICS Subsectors                           | A           |\n",
        "| 0000       | All NAICS Industry Groups                     | A           |\n",
        "| 11         | Agriculture, Forestry, Fishing and Hunting    | S           |\n",
        "| 111        | Crop Production                               | 3           |\n",
        "| 1111       | Oilseed and Grain Farming                    | 4           |\n",
        "| 1112       | Vegetable and Melon Farming                  | 4           |\n",
        "| ...        | ...                                           | ...         |\n",
        "| 2383       | Building Finishing Contractors               | 4           |\n",
        "| 2389       | Other Specialty Trade Contractors            | 4           |\n",
        "| 31-33      | Manufacturing                                | S           |\n",
        "| 311        | Food Manufacturing                          | 3           |\n",
        "| 3111       | Animal Food Manufacturing                   | 4           |\n",
        "| 3112       | Grain and Oilseed Milling                   | 4           |\n",
        "| 3113       | Sugar and Confectionery Product Manufacturing | 4           |\n",
        "| ...        | ...                                           | ...         |\n",
        "\n",
        "\n",
        "**5.13. Degree Level**\n",
        "\n",
        "| **degree_level** | **Label** |\n",
        "|--------------|----------------------------------|\n",
        "| 00         | All Degree Levels                |\n",
        "| 01         | Certificate < 1 year             |\n",
        "| 02         | Certificate 1-2 years            |\n",
        "| 03         | Associate's Degree               |\n",
        "| 04         | Certificate 2-4 years            |\n",
        "| 05         | Baccalaureate                     |\n",
        "| 06         | Post-Baccalaureate Certificate   |\n",
        "| 07         | Master's Degree                  |\n",
        "| 08         | Post-Master's Certificate        |\n",
        "| 17         | Doctoral - Research/Scholarship  |\n",
        "| 18         | Doctoral - Professional Practice |\n",
        "\n",
        "*Source: [LEHD Public Use Schema](https://lehd.ces.census.gov/data/schema/V4.12.0/lehd_public_use_schema.html)*\n",
        "\n",
        "<details>\n",
        "\n",
        "## First Analysis\n",
        "Let us further filter the data because we are only interested in the aggregate series for now."
      ],
      "id": "374f3fdf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: View_the_data\n",
        "\n",
        "\n",
        "## Create date variable\n",
        "df_qwi_filtered = df_qwi[\n",
        "    (df_qwi[\"sex\"] == 0) &\n",
        "    (df_qwi[\"agegrp\"] == \"A00\") &\n",
        "    (df_qwi[\"industry\"] == \"00\") &\n",
        "    (df_qwi[\"ind_level\"] == \"A\")\n",
        "].copy()  # Copy to avoid modifying the original DataFrame\n",
        "\n",
        "df_qwi_filtered[\"date\"] = pd.PeriodIndex(\n",
        "    df_qwi_filtered[\"year\"].astype(str) + \"Q\" + df_qwi_filtered[\"quarter\"].astype(str),\n",
        "    freq=\"Q\"\n",
        ").to_timestamp()\n",
        "\n",
        "# Drop unnecessary columns\n",
        "df_qwi_filtered.drop(columns=[\"periodicity\", \"seasonadj\", \"geo_level\", \"ind_level\", \"industry\",\n",
        "                              \"ownercode\", \"sex\", \"agegrp\", \"race\", \"ethnicity\", \"education\",\n",
        "                              \"firmage\", \"firmsize\", \"year\", \"quarter\", \"geography\"], inplace=True)\n",
        "\n",
        "# Ensure \"date\" is the first column\n",
        "df_qwi_filtered = df_qwi_filtered[[\"date\"] + [col for col in df_qwi_filtered.columns if col != \"date\"]]\n",
        "\n",
        "\n",
        "# Export to deseasonalize in R\n",
        "df_qwi_filtered.to_csv(\"temp_df.csv\", index=False)\n",
        "\n",
        "print(\"Data filtered and ready for deseasonalization.\")"
      ],
      "id": "View_the_data",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "It turns out that we need to use R (together with python) to use the usual seasonal adjustment with X13-ARIMA."
      ],
      "id": "c2a6850b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: seasonal_adjustment\n",
        "\n",
        "import subprocess\n",
        "\n",
        "# Run the R script\n",
        "subprocess.run([\"Rscript\", \"sheet_seas_adjust.r\"], check=True)\n",
        "\n",
        "# Clean up by deleting the temp file\n",
        "os.remove(\"temp_df.csv\")\n",
        "\n",
        "print(\"Data deseasonalized successfully.\")\n",
        "\n",
        "\n",
        "# We still need some data from FRED\n"
      ],
      "id": "seasonal_adjustment",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: figure_templates\n",
        "\n",
        "# Load the adjusted data\n",
        "df_qwi_filtered = pd.read_csv(\"qwi_data_seasadj.csv\")\n",
        "\n",
        "\n",
        "## Plotting\n",
        "import os\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.dates as mdates\n",
        "from datetime import datetime\n",
        "\n",
        "# plt.ioff()  # Plots only show when explicitly called in quarto\n",
        "\n",
        "\n",
        "## Single Time Series\n",
        "def fun_plot_single_ts(df, date_col, value_col, title=\"Time Series Plot\", xlabel=\"Date\", ylabel=\"Value\", color=\"#023047\", recession_shading=True, recessions=None, scale_factor=1):\n",
        "    # Convert date column to datetime format\n",
        "    df[date_col] = pd.to_datetime(df[date_col])\n",
        "\n",
        "    # Define default recession periods if none are provided\n",
        "    if recessions is None:\n",
        "        recessions = [\n",
        "            (\"2001-03-01\", \"2001-11-01\"),\n",
        "            (\"2007-12-01\", \"2009-06-01\"),\n",
        "            (\"2020-02-01\", \"2020-04-01\")\n",
        "        ]\n",
        "\n",
        "    # Convert recession dates to datetime format\n",
        "    recession_periods = [(datetime.strptime(start, \"%Y-%m-%d\"), datetime.strptime(end, \"%Y-%m-%d\")) for start, end in recessions]\n",
        "\n",
        "    # Apply scaling\n",
        "    df[value_col] /= scale_factor\n",
        "\n",
        "    # Create the figure and axis\n",
        "    fig, ax = plt.subplots(figsize=(12, 6))\n",
        "\n",
        "    # Plot the time series\n",
        "    ax.plot(df[date_col], df[value_col], color=color, linewidth=2, label='_nolegend_')\n",
        "\n",
        "    # Highlight recession periods with lighter shading\n",
        "    if recession_shading:\n",
        "        for start, end in recession_periods:\n",
        "            ax.axvspan(start, end, color=\"grey\", alpha=0.3)\n",
        "\n",
        "    # Labels and title\n",
        "    ax.set_xlabel(xlabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_ylabel(ylabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_title(title, fontsize=16, fontweight=\"bold\")\n",
        "\n",
        "    # Improve readability\n",
        "    ax.xaxis.set_major_locator(mdates.YearLocator(base=5))  # Show every 5 years\n",
        "    ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\n",
        "    ax.tick_params(axis='x', rotation=45, labelsize=12)\n",
        "    ax.tick_params(axis='y', labelsize=12)\n",
        "    ax.grid(False)  # Remove grid\n",
        "\n",
        "    # Adjust layout\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "\n",
        "## Three Time Series\n",
        "def fun_plot_three_ts(df, date_col, value_col1, value_col2, value_col3, title=\"Time Series Plot\", xlabel=\"Date\", ylabel=\"Value\", color1=\"#023047\", color2=\"#34a937\", color3=\"#bc5090\", line_type2=\"solid\", line_type3=\"dashed\", recession_shading=True, recessions=None, legend1=\"Series 1\", legend2=\"Series 2\", legend3=\"Series 3\", scale_factor=1):\n",
        "    # Convert date column to datetime format\n",
        "    df[date_col] = pd.to_datetime(df[date_col])\n",
        "\n",
        "    # Define default recession periods if none are provided\n",
        "    if recessions is None:\n",
        "        recessions = [\n",
        "            (\"2001-03-01\", \"2001-11-01\"),\n",
        "            (\"2007-12-01\", \"2009-06-01\"),\n",
        "            (\"2020-02-01\", \"2020-04-01\")\n",
        "        ]\n",
        "\n",
        "    # Convert recession dates to datetime format\n",
        "    recession_periods = [(datetime.strptime(start, \"%Y-%m-%d\"), datetime.strptime(end, \"%Y-%m-%d\")) for start, end in recessions]\n",
        "\n",
        "    # Apply scaling\n",
        "    df[value_col1] /= scale_factor\n",
        "    df[value_col2] /= scale_factor\n",
        "    df[value_col3] /= scale_factor\n",
        "\n",
        "    # Create the figure and axis\n",
        "    fig, ax = plt.subplots(figsize=(12, 6))\n",
        "\n",
        "    # Plot the three time series\n",
        "    ax.plot(df[date_col], df[value_col1], color=color1, linewidth=2, label=legend1)\n",
        "    ax.plot(df[date_col], df[value_col2], color=color2, linewidth=2, linestyle=line_type2, label=legend2)\n",
        "    ax.plot(df[date_col], df[value_col3], color=color3, linewidth=2, linestyle=line_type3, label=legend3)\n",
        "\n",
        "    # Highlight recession periods with lighter shading\n",
        "    if recession_shading:\n",
        "        for start, end in recession_periods:\n",
        "            ax.axvspan(start, end, color=\"grey\", alpha=0.3)\n",
        "\n",
        "    # Labels and title\n",
        "    ax.set_xlabel(xlabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_ylabel(ylabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_title(title, fontsize=16, fontweight=\"bold\")\n",
        "\n",
        "    # Improve readability\n",
        "    ax.xaxis.set_major_locator(mdates.YearLocator(base=5))  # Show every 5 years\n",
        "    ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))\n",
        "    ax.tick_params(axis='x', rotation=45, labelsize=12)\n",
        "    ax.tick_params(axis='y', labelsize=12)\n",
        "    ax.grid(False)  # Remove grid\n",
        "    ax.legend()\n",
        "\n",
        "    # Adjust layout\n",
        "    plt.tight_layout()\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "\n",
        "import matplotlib.dates as mdates\n",
        "\n",
        "def fun_plot_three_bars(df, date_col, value_col1, value_col2, value_col3, title=\"Stacked Bar Chart\", xlabel=\"Date\", ylabel=\"Value\", color1=\"#023047\", color2=\"#34a937\", color3=\"#bc5090\", legend1=\"Series 1\", legend2=\"Series 2\", legend3=\"Series 3\", scale_factor=1):\n",
        "    # Convert date column to datetime format\n",
        "    df[date_col] = pd.to_datetime(df[date_col])\n",
        "\n",
        "    # Apply scaling\n",
        "    df[value_col1] /= scale_factor\n",
        "    df[value_col2] /= scale_factor\n",
        "    df[value_col3] /= scale_factor\n",
        "\n",
        "    # Calculate bar width dynamically\n",
        "    date_range = df[date_col].max() - df[date_col].min()\n",
        "    avg_time_interval = date_range / len(df)\n",
        "    bar_width = avg_time_interval.days * 0.8  # Adjust factor to control width\n",
        "\n",
        "    # Create stacked bar chart\n",
        "    fig, ax = plt.subplots(figsize=(12, 6))\n",
        "    x = df[date_col]\n",
        "    y1 = df[value_col1]\n",
        "    y2 = df[value_col2]\n",
        "    y3 = df[value_col3]\n",
        "\n",
        "    ax.bar(x, y1, color=color1, label=legend1, width=bar_width)\n",
        "    ax.bar(x, y2, bottom=y1, color=color2, label=legend2, width=bar_width)\n",
        "    ax.bar(x, y3, bottom=y1 + y2, color=color3, label=legend3, width=bar_width)\n",
        "\n",
        "    # Format x-axis for dates with major ticks every few years\n",
        "    ax.xaxis.set_major_locator(mdates.YearLocator(base=5))  # Show every 5 years\n",
        "    ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))  # Format as Year\n",
        "    plt.xticks(rotation=45)  # Rotate for better readability\n",
        "\n",
        "    # Labels and title\n",
        "    ax.set_xlabel(xlabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_ylabel(ylabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_title(title, fontsize=16, fontweight=\"bold\")\n",
        "    ax.legend()\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "\n",
        "# Example usage:\n",
        "fun_plot_three_bars(\n",
        "    df=df_qwi_filtered,\n",
        "    date_col=\"date\",\n",
        "    value_col1=\"HirAEndRepl\",\n",
        "    value_col2=\"HirAEnd\",\n",
        "    value_col3=\"HirA\",\n",
        "    title=\"Labor Market Indicators Over Time\",\n",
        "    xlabel=\"Date\",\n",
        "    ylabel=\"Levels (in millions)\",\n",
        "    color1=\"#023047\",\n",
        "    color2=\"#34a937\",\n",
        "    color3=\"#bc5090\",\n",
        "    legend1=\"Replacement\",\n",
        "    legend2=\"Hires\",\n",
        "    legend3=\"All Hires\",\n",
        "    scale_factor=1000000\n",
        ")\n",
        "\n",
        "def fun_plot_three_bars_line(df, date_col, value_col1, value_col2, value_col3, line_col=None, title=\"Stacked Bar Chart\", xlabel=\"Date\", ylabel=\"Value\", color1=\"#023047\", color2=\"#34a937\", color3=\"#bc5090\", line_color=\"black\", line_legend=\"Reference Line\", legend1=\"Series 1\", legend2=\"Series 2\", legend3=\"Series 3\", scale_factor=1):\n",
        "    # Convert date column to datetime format\n",
        "    df[date_col] = pd.to_datetime(df[date_col])\n",
        "\n",
        "    # Apply scaling\n",
        "    df[value_col1] /= scale_factor\n",
        "    df[value_col2] /= scale_factor\n",
        "    df[value_col3] /= scale_factor\n",
        "    if line_col:\n",
        "        df[line_col] /= scale_factor\n",
        "\n",
        "    # Calculate bar width dynamically\n",
        "    date_range = df[date_col].max() - df[date_col].min()\n",
        "    avg_time_interval = date_range / len(df)\n",
        "    bar_width = avg_time_interval.days * 0.8  # Adjust factor to control width\n",
        "\n",
        "    # Create stacked bar chart\n",
        "    fig, ax = plt.subplots(figsize=(12, 6))\n",
        "    x = df[date_col]\n",
        "    y1 = df[value_col1]\n",
        "    y2 = df[value_col2]\n",
        "    y3 = df[value_col3]\n",
        "\n",
        "    ax.bar(x, y1, color=color1, label=legend1, width=bar_width)\n",
        "    ax.bar(x, y2, bottom=y1, color=color2, label=legend2, width=bar_width)\n",
        "    ax.bar(x, y3, bottom=y1 + y2, color=color3, label=legend3, width=bar_width)\n",
        "\n",
        "    # Add optional line plot\n",
        "    if line_col:\n",
        "        ax.plot(x, df[line_col], color=line_color, linewidth=2, linestyle=\"dashed\", label=line_legend)\n",
        "\n",
        "    # Format x-axis for dates with major ticks every few years\n",
        "    ax.xaxis.set_major_locator(mdates.YearLocator(base=5))  # Show every 5 years\n",
        "    ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))  # Format as Year\n",
        "    plt.xticks(rotation=45)  # Rotate for better readability\n",
        "\n",
        "    # Labels and title\n",
        "    ax.set_xlabel(xlabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_ylabel(ylabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_title(title, fontsize=16, fontweight=\"bold\")\n",
        "    ax.legend()\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "\n",
        "# Example usage:\n",
        "fun_plot_three_bars(\n",
        "    df=df_qwi_filtered,\n",
        "    date_col=\"date\",\n",
        "    value_col1=\"HirAEndRepl\",\n",
        "    value_col2=\"HirAEnd\",\n",
        "    value_col3=\"HirA\",\n",
        "    line_col=\"TotalEmployment\",  # Additional line over bars\n",
        "    title=\"Labor Market Indicators Over Time\",\n",
        "    xlabel=\"Date\",\n",
        "    ylabel=\"Levels (in millions)\",\n",
        "    color1=\"#023047\",\n",
        "    color2=\"#34a937\",\n",
        "    color3=\"#bc5090\",\n",
        "    line_color=\"black\",\n",
        "    line_legend=\"Total Employment\",\n",
        "    legend1=\"Replacement\",\n",
        "    legend2=\"Hires\",\n",
        "    legend3=\"All Hires\",\n",
        "    scale_factor=1000000\n",
        ")\n",
        "\n",
        "def fun_plot_two_bars_line(df, date_col, value_col1, value_col2, value_col3, line_col=None, title=\"Stacked Bar Chart\", xlabel=\"Date\", ylabel=\"Value\", color1=\"#023047\", color2=\"#34a937\", line_color=\"black\", line_legend=\"Reference Line\", legend1=\"Series 1\", legend2=\"Series 2\", scale_factor=1):\n",
        "    # Convert date column to datetime format\n",
        "    df[date_col] = pd.to_datetime(df[date_col])\n",
        "\n",
        "    # Apply scaling\n",
        "    df[value_col1] /= scale_factor\n",
        "    df[value_col2] /= scale_factor\n",
        "        if line_col:\n",
        "        df[line_col] /= scale_factor\n",
        "\n",
        "    # Calculate bar width dynamically\n",
        "    date_range = df[date_col].max() - df[date_col].min()\n",
        "    avg_time_interval = date_range / len(df)\n",
        "    bar_width = avg_time_interval.days * 0.8  # Adjust factor to control width\n",
        "\n",
        "    # Create stacked bar chart\n",
        "    fig, ax = plt.subplots(figsize=(12, 6))\n",
        "    x = df[date_col]\n",
        "    y1 = df[value_col1]\n",
        "    y2 = df[value_col2]\n",
        "\n",
        "    ax.bar(x, y1, color=color1, label=legend1, width=bar_width)\n",
        "    ax.bar(x, y2, bottom=y1, color=color2, label=legend2, width=bar_width)\n",
        "\n",
        "    # Add optional line plot\n",
        "    if line_col:\n",
        "        ax.plot(x, df[line_col], color=line_color, linewidth=2, linestyle=\"dashed\", label=line_legend)\n",
        "\n",
        "    # Format x-axis for dates with major ticks every few years\n",
        "    ax.xaxis.set_major_locator(mdates.YearLocator(base=5))  # Show every 5 years\n",
        "    ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%Y\"))  # Format as Year\n",
        "    plt.xticks(rotation=45)  # Rotate for better readability\n",
        "\n",
        "    # Labels and title\n",
        "    ax.set_xlabel(xlabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_ylabel(ylabel, fontsize=14, fontweight=\"bold\")\n",
        "    ax.set_title(title, fontsize=16, fontweight=\"bold\")\n",
        "    ax.legend()\n",
        "\n",
        "    # Show the plot\n",
        "    plt.show()\n",
        "\n",
        "# Example usage:\n",
        "fun_plot_three_bars(\n",
        "    df=df_qwi_filtered,\n",
        "    date_col=\"date\",\n",
        "    value_col1=\"HirAEndRepl\",\n",
        "    value_col2=\"HirAEnd\",\n",
        "    value_col3=\"HirA\",\n",
        "    line_col=\"TotalEmployment\",  # Additional line over bars\n",
        "    title=\"Labor Market Indicators Over Time\",\n",
        "    xlabel=\"Date\",\n",
        "    ylabel=\"Levels (in millions)\",\n",
        "    color1=\"#023047\",\n",
        "    color2=\"#34a937\",\n",
        "    color3=\"#bc5090\",\n",
        "    line_color=\"black\",\n",
        "    line_legend=\"Total Employment\",\n",
        "    legend1=\"Replacement\",\n",
        "    legend2=\"Hires\",\n",
        "    legend3=\"All Hires\",\n",
        "    scale_factor=1000000\n",
        ")\n"
      ],
      "id": "figure_templates",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "fig-show": "none"
      },
      "source": [
        "#| label: plot_series\n",
        "#| echo: false\n",
        "\n",
        "# Example usage:\n",
        "df_qwi_filtered = pd.read_csv(\"qwi_data_seasadj.csv\")\n",
        "fun_plot_single_ts(\n",
        "    df=df_qwi_filtered,\n",
        "    date_col=\"date\",\n",
        "    value_col=\"HirAEndRepl\",\n",
        "    title=\"Hiring Activity Over Time\",\n",
        "    xlabel=\"Date\",\n",
        "    ylabel=\"Replacement Hires (in millions)\",\n",
        "    color=\"#023047\",\n",
        "    recession_shading=True,\n",
        "    scale_factor=1000000\n",
        ")\n",
        "\n",
        "# Example usage:\n",
        "fun_plot_three_ts(\n",
        "    df=df_qwi_filtered,\n",
        "    date_col=\"date\",\n",
        "    value_col1=\"HirAEndRepl\",\n",
        "    value_col2=\"HirAEnd\",\n",
        "    value_col3=\"HirA\",\n",
        "    title=\"Labor Market Indicators Over Time\",\n",
        "    xlabel=\"Date\",\n",
        "    ylabel=\"Levels (in millions)\",\n",
        "    color1=\"#023047\",\n",
        "    color2=\"#34a937\",\n",
        "    color3=\"#bc5090\",\n",
        "    recession_shading=True,\n",
        "    legend1=\"Replacement\",\n",
        "    legend2=\"Hires\",\n",
        "    legend3=\"All Hires\",\n",
        "    scale_factor=1000000\n",
        ")\n"
      ],
      "id": "plot_series",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {layout-ncol=2}\n",
        "<div style=\"text-align: center;\">\n",
        "  ![](main_quarto_files/figure-html/plot_series-output-1.svg){.lightbox}\n",
        "  <div style=\"font-size: 10px; width: 100%; text-align: justify;\">Notes.</div>\n",
        "</div>\n",
        "\n",
        "<div style=\"text-align: center;\">\n",
        "  ![](main_quarto_files/figure-html/plot_series-output-2.svg){.lightbox}\n",
        "  <div style=\"font-size: 10px; width: 100%; text-align: justify;\">Notes.</div>\n",
        "</div>\n",
        "\n",
        "<div style=\"text-align: center;\">\n",
        "  ![](main_quarto_files/figure-html/plot_series-output-3.svg){.lightbox}\n",
        "  <div style=\"font-size: 10px; width: 100%; text-align: justify;\">Notes.</div>\n",
        "</div>HirA\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "Now that we know that the plots work and look ok, let"
      ],
      "id": "dd83a110"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "quarto_env",
      "language": "python",
      "display_name": "Python (quarto_env)",
      "path": "C:\\Users\\moritz\\AppData\\Roaming\\jupyter\\kernels\\quarto_env"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}